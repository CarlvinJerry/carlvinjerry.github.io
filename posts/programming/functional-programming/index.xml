<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming subcategory language subcategory F# on RΞCURSION</title><link>https://carlvinjerry.github.io/posts/programming/functional-programming/</link><description>Recent content in Programming subcategory language subcategory F# on RΞCURSION</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://carlvinjerry.github.io/posts/programming/functional-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Modelling Relationships in F# for Domain-Driven Design</title><link>https://carlvinjerry.github.io/posts/programming/functional-programming/discriminated-unions/</link><pubDate>Mon, 21 Jul 2025 08:06:25 +0600</pubDate><guid>https://carlvinjerry.github.io/posts/programming/functional-programming/discriminated-unions/</guid><description>This post explores F#&amp;rsquo;s discriminated unions for domain-driven design, focusing on financial systems. Through examples like modeling financial instruments, transactions, and account types, we demonstrate how to encode business rules, ensure type safety, and simplify complex domains using F#.</description></item><item><title>Understanding Functors and Monads in F# with Statistical and Financial Models</title><link>https://carlvinjerry.github.io/posts/programming/functional-programming/monads/</link><pubDate>Mon, 28 Apr 2025 08:06:25 +0600</pubDate><guid>https://carlvinjerry.github.io/posts/programming/functional-programming/monads/</guid><description>This blog post demystifies functors and monads in F# through real-world statistical and financial modeling examples. Learn how Option, Result, and Async types simplify handling missing data, errors, and asynchronous computations, enabling robust and composable code for data processing, risk modeling, and Monte Carlo simulations.</description></item><item><title>Functional Programming</title><link>https://carlvinjerry.github.io/posts/programming/functional-programming/functional-programming/</link><pubDate>Thu, 20 Apr 2023 19:17:21 +0300</pubDate><guid>https://carlvinjerry.github.io/posts/programming/functional-programming/functional-programming/</guid><description>Functional programming (FP) is more than just a programming paradigm; it&amp;rsquo;s a way of thinking about software development that has gained significant traction in recent years. This post aims to demystify functional programming and explore its practical implications.
What is Functional Programming? At its core, functional programming is a programming paradigm where programs are constructed by applying and composing functions. It emphasizes:
Pure Functions: Functions that always produce the same output for the same input and have no side effects.</description></item></channel></rss>