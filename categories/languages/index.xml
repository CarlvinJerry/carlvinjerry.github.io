<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Languages on RΞCURSION</title><link>https://carlvinjerry.github.io/categories/languages/</link><description>Recent content in Languages on RΞCURSION</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 04 Aug 2025 16:54:25 +0600</lastBuildDate><atom:link href="https://carlvinjerry.github.io/categories/languages/index.xml" rel="self" type="application/rss+xml"/><item><title>Seamless R Integration in .NET with R.NET: A Step-by-Step Guide</title><link>https://carlvinjerry.github.io/posts/programming/interoperability/rdotnet-interop/</link><pubDate>Mon, 04 Aug 2025 16:54:25 +0600</pubDate><guid>https://carlvinjerry.github.io/posts/programming/interoperability/rdotnet-interop/</guid><description>This post explores how R.NET enables seamless in-process R integration in .NET, focusing on statistical computations. Through a simple F# example calculating mean and standard deviation, we demonstrate how to set up R.NET, call R functions, and handle common pitfalls, empowering .NET developers to leverage R’s power.</description></item><item><title>Modelling Relationships in F# for Domain-Driven Design</title><link>https://carlvinjerry.github.io/posts/programming/functional-programming/discriminated-unions/</link><pubDate>Mon, 21 Jul 2025 08:06:25 +0600</pubDate><guid>https://carlvinjerry.github.io/posts/programming/functional-programming/discriminated-unions/</guid><description>This post explores F#&amp;rsquo;s discriminated unions for domain-driven design, focusing on financial systems. Through examples like modeling financial instruments, transactions, and account types, we demonstrate how to encode business rules, ensure type safety, and simplify complex domains using F#.</description></item><item><title>Understanding Functors and Monads in F# with Statistical and Financial Models</title><link>https://carlvinjerry.github.io/posts/programming/functional-programming/monads/</link><pubDate>Mon, 28 Apr 2025 08:06:25 +0600</pubDate><guid>https://carlvinjerry.github.io/posts/programming/functional-programming/monads/</guid><description>This blog post demystifies functors and monads in F# through real-world statistical and financial modeling examples. Learn how Option, Result, and Async types simplify handling missing data, errors, and asynchronous computations, enabling robust and composable code for data processing, risk modeling, and Monte Carlo simulations.</description></item><item><title>What’s New in F# 9 for Quant Developers</title><link>https://carlvinjerry.github.io/posts/programming/languages/fsharp/fsharp-9-review/</link><pubDate>Wed, 23 Apr 2025 19:51:10 +0300</pubDate><guid>https://carlvinjerry.github.io/posts/programming/languages/fsharp/fsharp-9-review/</guid><description>Unlike general-purpose updates, many of F# 9&amp;rsquo;s features are particularly well-aligned with the needs of quantitative professionals—those who balance mathematical modeling, financial computation, and high-integrity codebases. These improvements refine the language’s functional core while addressing practical challenges faced in real-world applications, such as code readability, workflow modularity, and precision in data modeling.
In this post, I’ll walk through some of the key updates in F# 9 and explore how they can improve the way we write and structure quantitative code.</description></item><item><title>Functional Programming</title><link>https://carlvinjerry.github.io/posts/programming/functional-programming/functional-programming/</link><pubDate>Thu, 20 Apr 2023 19:17:21 +0300</pubDate><guid>https://carlvinjerry.github.io/posts/programming/functional-programming/functional-programming/</guid><description>Functional programming (FP) is more than just a programming paradigm; it&amp;rsquo;s a way of thinking about software development that has gained significant traction in recent years. This post aims to demystify functional programming and explore its practical implications.
What is Functional Programming? At its core, functional programming is a programming paradigm where programs are constructed by applying and composing functions. It emphasizes:
Pure Functions: Functions that always produce the same output for the same input and have no side effects.</description></item></channel></rss>