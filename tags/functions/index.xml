<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Functions on RΞCURSION</title><link>https://carlvinjerry.github.io/tags/functions/</link><description>Recent content in Functions on RΞCURSION</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 07 Oct 2024 08:06:25 +0600</lastBuildDate><atom:link href="https://carlvinjerry.github.io/tags/functions/index.xml" rel="self" type="application/rss+xml"/><item><title>Currying and Partial Application in F#</title><link>https://carlvinjerry.github.io/posts/programming/code-sustainability/succint-fsharp/currying/</link><pubDate>Mon, 07 Oct 2024 08:06:25 +0600</pubDate><guid>https://carlvinjerry.github.io/posts/programming/code-sustainability/succint-fsharp/currying/</guid><description>The mathematical definition of a function can be denoted as a relationship between a set of inputs (the domain) and a single output (the co-domain). When a mathematical function is said to have only one parameter, it typically means that it takes a single value as input. However, in functional programming we build functions that theoretically &amp;ldquo;defy&amp;rdquo; this concept by taking in multiple input parameters.
Traditionally, a mathematical function may only accept one input at a time.</description></item><item><title>Enhancing Code Maintainability with the F# 'Option' Type</title><link>https://carlvinjerry.github.io/posts/programming/code-sustainability/succint-fsharp/fs-option-type/</link><pubDate>Tue, 17 Sep 2024 08:06:25 +0600</pubDate><guid>https://carlvinjerry.github.io/posts/programming/code-sustainability/succint-fsharp/fs-option-type/</guid><description>A common case in programming is handling variables that might or might not hold a value. The C# language for example, uses Nullable&amp;lt;T&amp;gt; to represent such cases. This enables you to declare variables as nullables that would otherwise not be assigned to Nulls (e.g a float or an int). Handling these null references in languages like C# or Java can often lead to bugs. A clean and powerful solution to this problem is provided in F#: the Option type.</description></item></channel></rss>